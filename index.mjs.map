{"version":3,"file":"index.mjs","sources":["../lib/validate.js","../lib/data.js","../lib/browser.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport hasOwnProp from '@stdlib/assert-has-own-property';\nimport isObject from '@stdlib/assert-is-plain-object';\nimport { isPrimitive as isString } from '@stdlib/assert-is-string';\nimport format from '@stdlib/string-format';\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {string} [options.data] - dataset name\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var options = {\n*     'data': 'phones'\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'data' ) ) {\n\t\topts.data = options.data;\n\t\tif ( !isString( opts.data ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a string. Option: `%s`.', 'data', opts.data ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nexport default validate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport dict from './../data/dict.json';\nimport phones from './../data/phones.json';\nimport symbols from './../data/symbols.json';\nimport vp from './../data/vp.json';\n\n\n// MAIN //\n\nvar data = {};\ndata.dict = dict;\ndata.phones = phones;\ndata.symbols = symbols;\ndata.vp = vp;\n\n\n// EXPORTS //\n\nexport default data;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport objectKeys from '@stdlib/utils-keys';\nimport copy from '@stdlib/utils-copy';\nimport hasOwnProp from '@stdlib/assert-has-own-property';\nimport format from '@stdlib/string-format';\nimport validate from './validate.js';\nimport dataCMU from './data.js';\n\n\n// MAIN //\n\n/**\n* Returns datasets from the Carnegie Mellon Pronouncing Dictionary (CMUdict).\n*\n* @param {Options} [options] - options object\n* @param {string} [options.data] - dataset name\n* @throws {TypeError} must provide an object\n* @throws {TypeError} must provide valid options\n* @throws {RangeError} must provide a recognized dataset name\n* @returns {(Object|ObjectArray)} dataset(s)\n*\n* @example\n* var data = cmudict();\n* // returns <Object>\n*\n* @example\n* var data = cmudict({\n*\t'data': 'phones'\n* });\n* // returns <Object>\n*/\nfunction cmudict( options ) {\n\tvar opts;\n\tvar err;\n\n\tif ( arguments.length > 0 ) {\n\t\topts = {};\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t\tif ( opts.data ) {\n\t\t\tif ( !hasOwnProp( dataCMU, opts.data ) ) {\n\t\t\t\tthrow new RangeError( format( 'invalid option. `%s` option must be one of the following: \"%s\". Option: `%s`.', 'data', objectKeys( dataCMU ).join( '\", \"' ), opts.data ) );\n\t\t\t}\n\t\t\treturn copy( dataCMU[ opts.data ] );\n\t\t}\n\t}\n\treturn copy( dataCMU );\n}\n\n\n// EXPORTS //\n\nexport default cmudict;\n"],"names":["validate","opts","options","isObject","hasOwnProp","data","isString","TypeError","format","cmudict","err","arguments","length","dataCMU","RangeError","objectKeys","join","copy","dict","phones","symbols","vp"],"mappings":";;+iBAiDA,SAASA,EAAUC,EAAMC,GACxB,OAAMC,EAAUD,GAGXE,EAAYF,EAAS,UACzBD,EAAKI,KAAOH,EAAQG,MACdC,EAAUL,EAAKI,OACb,IAAIE,UAAWC,EAAQ,8DAA+D,OAAQP,EAAKI,OAGrG,KARC,IAAIE,UAAWC,EAAQ,qEAAsEN,GAStG,+m7sHC9BIG,EAAO,CAAA,ECsBX,SAASI,EAASP,GACjB,IAAID,EACAS,EAEJ,GAAKC,UAAUC,OAAS,EAAI,CAG3B,GADAF,EAAMV,EADNC,EAAO,CAAA,EACeC,GAErB,MAAMQ,EAEP,GAAKT,EAAKI,KAAO,CAChB,IAAMD,EAAYS,EAASZ,EAAKI,MAC/B,MAAM,IAAIS,WAAYN,EAAQ,gFAAiF,OAAQO,EAAYF,GAAUG,KAAM,QAAUf,EAAKI,OAEnK,OAAOY,EAAMJ,EAASZ,EAAKI,MAC3B,CACD,CACD,OAAOY,EAAMJ,EACd,CDvCAR,EAAKa,KAAOA,EACZb,EAAKc,OAASA,EACdd,EAAKe,8cACLf,EAAKgB"}